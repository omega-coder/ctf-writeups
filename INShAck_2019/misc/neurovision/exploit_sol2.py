import keras
from keras.models import load_model
from keras.losses import mean_squared_error
from keras import backend
from PIL import Image
from numpy import numpy


model = load_model('neurovision-2d327377b559adb7fc04e0c3ee5c950c')
in_layer = model.layers[0].input    #input layer shape=(?, 68, 218)
out_layer = model.layers[1].output  #output layer shape=(?, 1)

"""
COST FUNCTION
cost function is defined as the mean squared error of the output
layer and the value 1 which our desired value
"""
cost = mean_squared_error(out_layer, 1)

"""
GRADIENT FUNCTION
Gradient function is defined with parameters cost function and 
our model input layer
We will use keras backend to define the gradients.
"""

grad = backend.gradients(cost, in_layer)[0]

"""
WE WILL DEFINE A FUNCTION TO RETURN COST AND GRADIENT
WHEN INPUT IS FED
"""

get_cost_and_grad = backend.function([in_layer], [cost, grad])

# generate a random image.
image = np.random.rand(1, 68, 218).astype(np.float32)
desired_cost = 0.1    # desired cost is gonna be 0.1
lr = 1000             # Set the learning rate to 1000, seemed like a good learning rate in our situation

images_list = [] # make a list to store image instances

"""
Iterate until calculated cost <= taegeted_cost
"""
while True:
  # claculate both cost an gradient
  cost_, grad_ = get_cost_and_grad([image])
  if cost_ < desired_cost:
    break

  # updating image matrix
  image -= (grad_ * lr)
  # reshaping image to be stored (Needs Pillow)
  im = Image.fromarray(((image).astype(np.uint8) * 255).reshape(68, 218))
  images_list.append(im)

images_list[0].save("animated_flag.gif", save_all=True, append_images=images_list[1:], duration=100, loop=0)

